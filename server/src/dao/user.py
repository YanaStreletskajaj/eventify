from sqlalchemy import select
from sqlalchemy.exc import IntegrityError, SQLAlchemyError
from sqlalchemy.ext.asyncio import AsyncSession

from core import logger
from models.user import User
from schemas.schemas_user import UserRequestCreate


class UserDAO:
    def __init__(self, session: AsyncSession):
        self.session = session

    async def create_user(self, user: UserRequestCreate) -> User:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            new_user = User(**user.model_dump())
            self.session.add(new_user)
            await self.session.flush()
            await self.session.commit()
            logger.info(f"‚úî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_user.id} —Å–æ–∑–¥–∞–Ω")
            return new_user
        except IntegrityError as e:
            await self.session.rollback()
            logger.warning(f"–û—à–∏–±–∫–∞: {e}")
            raise ValueError("User already exists")
        except SQLAlchemyError as e:
            await self.session.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            raise RuntimeError("Database error")

    async def get_users(self):
        logger.debug("üîé –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤")
        try:
            stmt = select(User)
            result = await self.session.execute(stmt)
            users = result.scalars().all()
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(users)} –∑–∞–∫–∞–∑–æ–≤")

            return users
        except SQLAlchemyError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
            raise RuntimeError("Database error")